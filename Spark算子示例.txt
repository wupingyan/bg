

1、RDD的创建方式

	通过外部的数据文件创建，如HDFS
	val rdd1 = sc.textFile(“hdfs://192.168.88.111:9000/data/data.txt”)

	通过sc.parallelize进行创建
	val rdd1 = sc.parallelize(Array(1,2,3,4,5,6,7,8))

2、RDD的算子
（1）Transformation算子：
    （*）map（func）算子: 将输入的每个元素重写组合成一个元组
	  
		  val rdd2 = rdd1.map((_,"*"))
		  乘以10
		  val rdd2 = rdd1.map((_ * 10))
		  val rdd2 = rdd1.map((x:Int) = x + 10)
		  
	（*）filter（func）：返回一个新的RDD，该RDD是经过func运算后返回true的元素
	     val rdd3 = rdd1.filter(_ > 5)
		 
	（*）flatMap(func) 压平操作
	       val books = sc.parallelize(List("Hadoop","Hive","HDFS"))
		   books.flatMap(_.toList).collect
		   结果：res18: Array[Char] = Array(H, a, d, o, o, p, H, i, v, e, H, D, F, S)
   
		   val sen = sc.parallelize(List("I love Beijing","I love China","Beijing is the capital of China"))

	
	（*）union(otherDataset)：并集运算,注意类型要一致
	     val rdd4 = sc.parallelize(List(5,6,4,7))
		 val rdd5 = sc.parallelize(List(1,2,3,4))
		 val rdd6 = rdd4.union(rdd5)
	
	（*）intersection(otherDataset)：交集
	     val rdd7 = rdd5.intersection(rdd4)
	
	（*）distinct([numTasks]))：去掉重复数据
	     val rdd8 = sc.parallelize(List(5,6,4,7,5,5,5))
		 rdd8.distinct.collect
	
	（*）groupByKey([numTasks])	：对于一个<k,v>的RDD，按照Key进行分组
		 val rdd = sc.parallelize(Array(("I",1),("love",2),("I",3)))
			rdd.groupByKey.collect
			结果：res38: Array[(String, Iterable[Int])] = Array((love,CompactBuffer(2)), (I,CompactBuffer(1, 3)))

		 复杂一点的例子：
			val sen = sc.parallelize(List("I love Beijing","I love China","Beijing is the capital of China"))
			sen.flatMap(_.split(" ")).map((_,1)).groupByKey.collect
			
	（*）reduceByKey(func, [numTasks])：类似于groupByKey，区别是reduceByKey会有一个combiner的过程对每个分区上的数据先做一次合并
	     画图说明，所以效率更高
		 
	（*）cartesian笛卡尔积
		val rdd1 = sc.parallelize(List("tom", "jerry"))
		val rdd2 = sc.parallelize(List("tom", "kitty", "shuke"))
		val rdd3 = rdd1.cartesian(rdd2)
	
（2）Action算子：
		val rdd1 = sc.parallelize(List(1,2,3,4,5), 2)

	（*）collect
			rdd1.collect

	（*）reduce
			val rdd2 = rdd1.reduce(_+_)

	（*）count
			rdd1.count

	（*）top
			rdd1.top(2)

	（*）take
			rdd1.take(2)

	（*）first(similer to take(1))
			rdd1.first

	（*）takeOrdered
			rdd1.takeOrdered(3)	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	